<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>defateQ&#39;s Blog</title>
  
  <subtitle>Engineer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://defateq.github.io/"/>
  <updated>2019-07-15T07:30:16.405Z</updated>
  <id>http://defateq.github.io/</id>
  
  <author>
    <name>defateQ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux应用程序自启动方式总结</title>
    <link href="http://defateq.github.io/2019/07/15/Linux%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%90%AF%E5%8A%A8%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
    <id>http://defateq.github.io/2019/07/15/Linux应用程序自启动方式总结/</id>
    <published>2019-07-15T07:30:16.000Z</published>
    <updated>2019-07-15T07:30:16.405Z</updated>
    
    <content type="html"><![CDATA[<p>在Linux系统下，有多种方法可以实现程序或者脚本的自启动，本文将对这些方法进行梳理总结。</p><a id="more"></a><!-- toc --><h1 id="使用rc-local或rc-sysinit"><a href="#使用rc-local或rc-sysinit" class="headerlink" title="使用rc.local或rc.sysinit"></a>使用rc.local或rc.sysinit</h1><p>这是最简单的自启动方式，适合简单程序的自启动。编辑/etc/rc.d/rc.local文件，在该文件的末尾添加要启动的命令，例如：</p><p><code>/home/myusername/my_custom_app</code></p><p>这样my_custom_app程序就可以跟随Linux系统启动了。</p><p>也可以使用/etc/rc.d/rc.sysinit。rc.sysinit脚本用于完成系统服务程序的启动，如系统环境变量设置、设置系统时钟、加载字体、检查加载文件系统、生成系统启动信息日志文件等等。</p><h1 id="采用服务形式启动"><a href="#采用服务形式启动" class="headerlink" title="采用服务形式启动"></a>采用服务形式启动</h1><p>采用服务形式启动主要有三种方式，sysvinit、upstart和systemd。具体使用什么方式实现程序的自启动要看当前系统的启动方式。</p><h2 id="sysvinit启动"><a href="#sysvinit启动" class="headerlink" title="sysvinit启动"></a>sysvinit启动</h2><p>系统运行后首先启动init程序，其PID为1，init程序是系统其他所有进程的父进程。init首先会读取/etc/inittab文件，从而确定当前Linux系统的运行级别。通常服务器的默认级别为3，图形界面模式为5。然后init会从文件/etc/fstab中查找分区挂载信息，并将各个分区挂载到相应位置。再然后，init会依次读取rc.sysinit、rc、rcX.d、rc.local，最后启动tty和login，其中X代表当前系统的运行级别。具体启动流程如下：</p><p><code>init-&gt;inittab（运行级别）-&gt;rc.sysinit（系统初始化）-&gt;rc-&gt;rcX.d（启停服务）-&gt;rc.local-&gt;tty和login</code></p><p>使用sysvinit服务形式启动，可以在/etc/init.d下建立一个脚本文件my_custom_app，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># chkconfig: 345 99 10</span></span><br><span class="line"><span class="comment"># description: </span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">RETVAL=0</span><br><span class="line">start()</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">stop()</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line">start</span><br><span class="line">;;</span><br><span class="line">stop)</span><br><span class="line">stop</span><br><span class="line">;;</span><br><span class="line">restart)</span><br><span class="line"><span class="variable">$0</span> stop</span><br><span class="line">sleep 1</span><br><span class="line"><span class="variable">$0</span> start</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line"><span class="built_in">echo</span> $<span class="string">"Usage: <span class="variable">$0</span> &#123;start|stop|restart&#125;"</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="built_in">exit</span> <span class="variable">$RETVAL</span></span><br></pre></td></tr></table></figure><p>然后使用以下命令增加执行权限、建立链接：</p><p><code>chmod +x /etc/init.d/my_custom_app</code></p><p><code>ln -s /etc/init.d/my_custom_app /etc/rc3.d/S50MyCustomApp</code></p><p>可以使用以下命令设置开机自启动：</p><p><code>chkconfig --add my_custom_app</code></p><p>sysvinit是早期大多数Linux发行版采用的启动方式，但是它主要有以下两个缺点：</p><ol><li>启动时间长：因为采用串行启动的方式，只有前一个进程启动完成后，才会启动下一个进程，效率较低；</li><li>启动脚本复杂：init程序仅负责调用一下脚本，但不管其他事情，因此需要自己处理各种情况，使得脚本长而复杂。</li></ol><h2 id="upstart启动"><a href="#upstart启动" class="headerlink" title="upstart启动"></a>upstart启动</h2><p>upstart来源于Ubuntu Linux，使用基于事件的模型，能够尽可能启用更少的进程，并尽可能使更多进程并行启动，以解决传统sysvinit的问题。但是，upstart仍然保持着对Sysvinit启动模式的向下兼容，因此依然能够通过运行级别来管理各种服务，如使用/etc/rcX.d/目录，chkconfig工具等等。upstart不再使用单一的/etc/inittab文件，而是将各种初始化配置分散存放，用来各自响应相关的启动事件。init程序的配置目录位于/etc/init/目录中，原有的/etc/inittab文件仅保留默认运行级别的配置。</p><p>由于upstart兼容sysvinit，因此sysvinit中应用的自启动方式对于upstart仍然适用。对于upstart，还可以在/etc/init/目录下添加后缀名为conf的脚本用于自启动，示例如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># My test service - Upstart script demo description "Here goes the description of 'My test service'" author "Dave Null &lt;dave.null@example.com&gt;"</span></span><br><span class="line"><span class="comment"># Stanzas</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Stanzas define when and how a process is started and stopped</span></span><br><span class="line"><span class="comment"># See a list of stanzas here: http://upstart.ubuntu.com/wiki/Stanzas#respawn</span></span><br><span class="line"><span class="comment"># When to start the service</span></span><br><span class="line">start on runlevel [2345]</span><br><span class="line"><span class="comment"># When to stop the service</span></span><br><span class="line">stop on runlevel [016]</span><br><span class="line"><span class="comment"># Automatically restart process in case of crash</span></span><br><span class="line">respawn</span><br><span class="line"><span class="comment"># Specify working directory</span></span><br><span class="line"><span class="built_in">chdir</span> /home/dave/myfiles</span><br><span class="line"><span class="comment"># Specify the process/command (add arguments if needed) to run</span></span><br><span class="line"><span class="built_in">exec</span> bash backup.sh arg1 arg2</span><br></pre></td></tr></table></figure><p>其中start on runlevel控制着服务的自启动。要使配置生效，需要让upstart重新加载它的配置文件：</p><p><code>initctl reload-configuration</code></p><p>然后可以使用如下命令启动服务：</p><p><code>start yourjobname</code></p><h2 id="systemd启动"><a href="#systemd启动" class="headerlink" title="systemd启动"></a>systemd启动</h2><p>开发systemd的主要目的就是减少系统引导时间和计算开销。采用systemd启动方式的话，它将取代传统的init程序，启动过程将交由systemd来处理。systemd的一个核心功能是同时支持sysvinit的后开机启动脚本。因此，可以使用sysvinit的后开机启动脚本来实现自定义程序的开机自启动。</p><p>systemd使用target文件来处理引导和服务管理过程。systemd执行的第一个目标是default.target，它实际上是指向graphical.target的软连接，然后在这个阶段会启用multi-user.target，multi-user.target会将控制权交给另一层basic.target。basic.target用于启动普通服务特别是图形管理服务，之后会将控制权交给sysinit.target，来启动重要的系统服务，例如系统挂载、内存交换空间和设备、内核补充选项等等。</p><p>通常systemd的配置文件主要放在/usr/lib/systemd/system目录里，配置文件通常为以下形式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=this is hello service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart= &lt;shell <span class="built_in">command</span>&gt;</span><br><span class="line">ExecStop=&lt;shell <span class="built_in">command</span>&gt;</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>使用以下命令使服务开机自启动：</p><p><code>systemctl enable my_custom_app</code></p><h1 id="各种-rc文件"><a href="#各种-rc文件" class="headerlink" title="各种*rc文件"></a>各种*rc文件</h1><p>除了以上方式之外，还有一些其他的配置文件可以使程序随着用户登录等行为自启动，例如/etc/profile可以使所有用户登录时启动程序，/etc/bashrc则是所有用户执行bash时运行该脚本。此外，还有<del>/.profile、</del>/.bash_login、<del>/.bash_profile、</del>/.bashrc、~/.Xinitrc等等。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Linux系统下，有多种方法可以实现程序或者脚本的自启动，本文将对这些方法进行梳理总结。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://defateq.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>记一次Grub修复</title>
    <link href="http://defateq.github.io/2017/07/28/%E8%AE%B0%E4%B8%80%E6%AC%A1Grub%E4%BF%AE%E5%A4%8D/"/>
    <id>http://defateq.github.io/2017/07/28/记一次Grub修复/</id>
    <published>2017-07-27T16:00:00.000Z</published>
    <updated>2019-07-15T07:27:05.141Z</updated>
    
    <content type="html"><![CDATA[<p>这件事情非常奇怪。我只是在正常使用Linux，并没有对Grub或者内核进行什么操作，磁盘分区也没有什么变动，Root分区还是那个UUID，但不知为什么，Grub就是挂了，一开机直接给我出来这么个东西：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub rescue&gt;</span><br></pre></td></tr></table></figure><p>心里一万头羊驼奔过，一刹那有种想重装系统的冲动，因为本来计划着就要重装一次，但无奈现在还不到时候，而且有重要的事要用电脑，于是忍住了。还是想办法修复吧。</p><a id="more"></a><!-- toc --><h1 id="用以前的修复方法"><a href="#用以前的修复方法" class="headerlink" title="用以前的修复方法"></a>用以前的修复方法</h1><p>以前遇见过Grub被弄坏的情况，也成功修复过，于是还是想着用以前的办法修复。用U盘做了一个Manjaro的Live CD，关掉UEFI中的Secure Boot，从U盘启动。启动后直接打开Terminal，Chroot到出问题的本地Linux环境中。首先挂在/分区和/boot/efi分区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mkdir /mnt/arch</span></span><br><span class="line"><span class="comment"># mount /dev/nvme0n1p7 /mnt/arch</span></span><br><span class="line"><span class="comment"># mount /dev/nvme0n1p2 /mnt/arch/boot/efi</span></span><br></pre></td></tr></table></figure><p>然后挂载临时文件系统：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cd /mnt/arch</span></span><br><span class="line"><span class="comment"># mount -t proc proc proc/</span></span><br><span class="line"><span class="comment"># mount -t sysfs sys sys/</span></span><br><span class="line"><span class="comment"># mount -o bind /dev dev/</span></span><br><span class="line"><span class="comment"># mount -t devpts pts dev/pts/</span></span><br></pre></td></tr></table></figure><p>最后Change root：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chroot /mnt/arch /usr/bin/bash</span></span><br></pre></td></tr></table></figure><p>这样就chroot到本地磁盘的Linux环境中了，尝试修复一下Grub：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># update-grub</span></span><br></pre></td></tr></table></figure><p>update-grub重新生成了一遍/boot/grub/grub.cfg文件，但是并未修改或重新安装Grub软件，生成过程中并没有成功找到Windows系统。重启一下试试，结果还是悲剧。又重新启动到Live CD环境中，重新Chroot，这次尝试用grub-install命令重新安装了一遍Grub，结果发现并没有安装成功，efibootmgr了一下也显示并没有增加新的EFI启动项，好奇怪，难道是UEFI中不能在Chroot环境下用grub-install安装Grub启动项？要么就是我的grub-install参数不对？总之，反正是没成功。思来想去还是觉得得在原来的环境中修复Grub比较稳妥，所以不如还是试着用一下grub rescue吧，看能不能成功引导。</p><h1 id="引导本地Linux系统"><a href="#引导本地Linux系统" class="headerlink" title="引导本地Linux系统"></a>引导本地Linux系统</h1><p>看了一下grub rescue的用法，其实一点都不难，在了解自己硬盘分区和挂载情况的前提下，只需要敲几个简单的命令就可以成功引导了。我的Linux根目录装在我的第七个分区上，EFI分区无所谓了，这里暂时用不到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">grub rescue&gt; ls (hd0,gpt7)/boot/grub</span><br><span class="line">grub rescue&gt; set root=(hd0,gpt7)</span><br><span class="line">grub rescue&gt; set prefix=(hd0,gpt7)/boot/grub</span><br><span class="line">grub rescue&gt; insmod /boot/grub/x86_64-efi/normal.mod</span><br><span class="line">grub rescue&gt; normal</span><br></pre></td></tr></table></figure><p>Bingo! 到此即可成功加载熟悉的Grub界面了，选择Linux引导项，成功引导。</p><h1 id="修复Grub"><a href="#修复Grub" class="headerlink" title="修复Grub"></a>修复Grub</h1><p>成功引导原系统之后，还是先试着用update-grub修复了一下grub.cfg配置文件，这次Grub成功找到了Windows系统并自动生成引导项。然后重新启动，结果还是不行。看来并不是Grub的配置出问题，而是Grub软件本身出了问题。不知道会不会跟我用Preloader绕过Secure Boot检测有关系呢？估计很有可能。只好用grub-install重新安装一遍Grub了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=ManjaroRes</span></span><br></pre></td></tr></table></figure><p>用efibootmgr命令看一下，果然成功生成了一个名为“ManjaroRes”的启动项，重新启动，成功！这里还有一个小插曲，“–efi-directory”选项应该填的是EFI分区挂载的位置，即“/boot/efi”，而不是它下面的EFI目录。一开始我就写成了“–efi-directory=/boot/efi/EFI”，结果UEFI启动项是生成了，但根本启动不了。好了，后面收尾工作就简单了，把/boot/efi/EFI/ManjaroRes/grubx64.efi拷贝到/boot/efi/EFI/Manjaro/下，并且重命名为loader.efi，然后在UEFI设置中打开Secure Boot并启用第三方证书验证，加载Preloader，选择Enroll Hash把新的loader.efi添加进去，重启，成功加载熟悉的Grub界面。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>这次修复Grub虽然并没有花费很长时间，但是几经波折，电脑也重启了好多遍，终于还是修复了。只是Grub挂掉的原因还是不知道，要么就是跟我在Windows下的操作有关系，要么就是跟Preloader有关系了。不管怎么说，以后还是少遇到一些这么折腾的情况把。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这件事情非常奇怪。我只是在正常使用Linux，并没有对Grub或者内核进行什么操作，磁盘分区也没有什么变动，Root分区还是那个UUID，但不知为什么，Grub就是挂了，一开机直接给我出来这么个东西：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;grub rescue&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;心里一万头羊驼奔过，一刹那有种想重装系统的冲动，因为本来计划着就要重装一次，但无奈现在还不到时候，而且有重要的事要用电脑，于是忍住了。还是想办法修复吧。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://defateq.github.io/categories/Linux/"/>
    
    
      <category term="linux" scheme="http://defateq.github.io/tags/linux/"/>
    
      <category term="Grub" scheme="http://defateq.github.io/tags/Grub/"/>
    
  </entry>
  
</feed>
